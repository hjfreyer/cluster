// Code generated by go-bindata.
// sources:
// data/cloud_config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCloud_configYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x6b\x6f\xe2\x3a\x13\xfe\xde\x5f\x11\xf5\xfd\xb0\x1f\x56\x26\x17\x28\x09\x48\x48\x2f\xf4\xbe\xbd\x52\xba\x50\x78\xdf\xa3\x95\x63\x9b\xc4\x8d\x93\x80\xed\xa4\xa4\x3a\x3f\xfe\x38\x01\x71\x6b\xd2\x6d\xf7\x68\xcf\xa1\xaa\x20\xce\x3c\xe3\x99\xe7\x19\xcf\xf8\x3f\x88\xc5\x09\x06\x28\x8e\xa6\xd4\x3b\x38\x10\xc2\xff\x01\x13\xe9\xc7\x9c\xbe\x12\xfc\x23\x20\x99\x68\x1f\x68\x1a\xd0\x0e\xd5\x1b\xc0\x05\xd4\xba\xea\xd3\xab\xdf\xbe\xc2\x63\x33\x43\xd6\x69\xfe\x78\xd2\xed\x77\x7b\xf9\x72\xb7\x7f\x0c\x9f\xac\xe7\x53\x34\xb2\x87\x7c\xf8\xd4\xbf\xee\x8e\x02\x3f\x79\x8a\x8c\xfe\x51\x63\xd1\x38\x19\x0d\xc2\xfb\xcb\x31\x7e\xe4\xe7\xd3\xf4\xd4\x7b\x4d\xc9\xf7\x13\x57\x3a\x53\xca\x23\x01\x9b\xb0\x15\x05\x23\xf1\x30\x9f\xfa\x77\xd7\x11\x7a\xc8\x74\xde\xd0\xef\xfd\x61\x83\xda\xc6\x69\x38\x7f\xbe\x38\x6b\x79\xf6\x59\x70\x7e\x6b\xdf\xd8\xb0\x79\x35\xbe\x66\x4d\x33\xb6\xd0\x5c\xf0\xbe\x33\x9e\x74\x1d\x63\xe0\x4c\xf9\xb7\xdb\xb1\x77\xac\xdf\xb5\xb2\xf3\x74\xf2\x18\xb8\xcf\x8f\x47\xdf\xae\xf0\xd9\xe5\xed\xd8\xb9\x9c\xcc\x9c\xc1\xb8\xe7\x0d\xf0\xb5\x9e\xba\x8b\x87\x45\x7a\x37\x0f\xac\xee\x7d\xef\x76\x9a\x25\x2f\xcc\x17\xfe\x69\xdd\x1c\xcf\x03\x78\xd4\xf8\xea\xf6\x2f\xa0\x65\xb0\xef\xa3\x56\xaf\x3f\x1b\x65\x37\x4d\xdc\xea\xf9\x52\x1f\x67\xa2\x9e\x0d\xe7\xa6\x73\x95\xf9\xaf\xc3\xeb\x64\x74\x72\xf7\xc4\x50\x77\x1a\xcf\x27\x3d\x76\x7e\x64\x9f\xd8\xaf\x97\x27\x13\x83\x59\x75\x63\xf8\xfc\xb0\xc0\xdf\xfa\x0f\x41\x5a\x37\xef\xb0\x63\x7e\xc5\xf3\xc9\xd0\xb1\xeb\xe8\x3c\x4c\xaf\xbd\xd3\xb3\x0b\x56\x4f\xcd\xe7\x73\xef\x78\xe4\x0e\xd1\xc2\x78\x98\x34\x87\x93\x79\x3a\xef\x9d\x99\x84\x7d\xbd\x85\xb8\x71\xe1\xbb\xf4\x26\x80\xad\xc0\xd2\xe7\xde\x60\xa8\xf9\xcf\x53\x4e\x32\xc2\xff\x8b\xfc\x84\x23\xff\xf0\xe0\x00\xc5\x9c\xc4\x85\x36\x49\x44\x65\xf1\x23\x97\x29\x82\x21\x69\x6b\x18\x4a\x58\x0b\xe3\x24\x92\xc5\xb2\xa6\xa1\x38\x0c\x61\x84\xdb\x9a\x90\x90\x6f\x16\x23\x49\x22\xd9\xd6\xfe\x5c\x2d\x68\xda\xff\x6e\x72\xd0\x1f\xeb\xe7\x91\x0f\x65\x47\xc7\x24\xd5\x31\x15\x81\xee\x66\x20\x49\x28\xd6\x1d\xe4\xda\x2d\x6c\xb7\x80\x0d\x1d\x0b\x34\xac\x66\x1d\xb4\x9c\xa9\x0b\xcc\x96\x85\x9b\x75\xd3\x6c\x9a\x0e\xdc\xf2\x41\x38\x51\x4e\x54\x4c\xfa\x7a\xf1\x31\x9b\x91\x0e\x59\xc8\xc6\x4e\xdc\x61\x24\x81\xcb\x62\x14\x20\x1f\xd2\xe8\x77\x66\xd0\x32\x2c\x1b\xe3\x86\x0b\x20\x71\x4c\xd0\xa8\x1b\x0e\x68\xd5\x1b\x10\xd4\x9b\xb6\x89\x1d\xab\x69\xb6\xa0\xbb\x9f\x81\x8a\x4e\xdf\x44\x57\x96\xcb\x4e\x32\x41\xe2\x12\x46\x64\x4d\x10\x9e\x52\x44\xde\xcb\x83\x44\xd0\x65\x0a\x22\x79\x42\xde\x49\xed\xbb\x52\x7a\x93\xd9\x09\x11\x88\xd3\x99\xa4\x71\xd4\xb9\x52\x7b\xf1\x88\x48\x22\xb4\xab\xe5\xb6\x1b\xb3\x18\x25\xa1\xf2\x04\x0b\x43\x5f\xca\x99\x68\xeb\xba\x47\xa5\x9f\xb8\x35\x15\x8d\x1e\xac\xb1\x5b\x3f\x0f\x36\xbb\x0e\x96\xf1\x6f\x36\x3e\x5d\x10\x34\xc8\xa3\xbf\xcf\x59\x49\x04\xd7\x5d\x45\x47\x18\x60\xca\x35\x30\xd3\x74\x22\xd1\xb6\x53\x95\x2e\x9d\x12\x21\xc5\x5b\x07\x1b\xf4\x8a\x2c\xed\xff\x6b\x23\x45\x24\x80\x33\x0a\x72\xfa\x08\x17\x45\xe4\x2a\x70\xd3\xb2\x6b\x86\xfa\x33\xdb\x8e\xe1\x18\xfb\xf6\x8c\xc5\x2f\x60\xc6\x69\x4a\x19\xf1\x08\xee\xe4\x84\xee\xd9\x2c\x3b\x5d\xa7\x32\xca\x3d\xf3\xb4\x63\xad\x9f\x1f\x48\x21\x5a\x27\x8e\xc0\x14\x52\x96\x70\xb2\xff\x6a\x40\x50\xe7\x68\x8b\xbb\xcb\x48\x2d\x33\xb6\x55\x8e\x50\xc9\x8a\x7b\x59\x27\x4c\x98\xa4\x20\x51\xd9\xd5\x14\xd0\x53\x82\xbd\x70\x2a\xc9\x8f\xa9\x8a\x7c\xd5\x72\x67\x50\xfa\x6d\xed\x4b\x65\xa4\x5b\x8b\xb5\x0c\x86\xec\xcb\x41\x69\xe1\xac\xbe\x14\x97\x43\xc5\xa3\x2a\x82\xb6\x96\x9a\xab\xc5\x80\xe6\xa5\x78\x1f\xe3\xd5\x73\x48\x24\xcc\x0f\x6a\x5b\x5b\x47\xbc\x29\xe6\x9c\x3a\xc9\x63\xc6\x08\x5f\xbd\x15\x33\x82\xb6\x4c\xfd\x58\xc8\x5b\x22\x5f\x62\x1e\xec\xd4\xb2\xa6\xa5\x31\x53\x45\xb8\xea\x52\x2b\x6a\x57\x9e\x0f\x55\x7a\x60\x93\xc9\xe1\x96\xc9\xd2\xe3\x7d\x4e\xc3\xce\xaa\xb6\xa2\xe6\x70\x8f\x9a\xc3\x32\xf7\x42\x30\x80\x08\x97\x9f\xf4\x9c\x17\xa6\xf0\x21\x27\x3a\x82\x05\x9e\x4e\x29\x82\x55\x9b\xa4\x90\x03\x9e\x44\xbf\x9c\x87\xc2\xeb\x0a\xff\xb3\x5c\x54\xba\x18\xe4\xfa\xa8\xa3\xf6\xf9\x0d\x18\x75\x73\xc2\x70\xa9\x6b\x95\xef\xa7\x09\x2a\x75\xa4\x76\x69\x36\x3e\xe7\x6a\x0f\x92\x97\x99\x6a\xb0\xaa\x58\xb7\x6a\x6b\x8f\x85\xdd\x0d\x68\x08\xbd\xfc\x8d\x5b\xf3\x10\xaf\xd1\x58\xf1\xa8\xf2\xcd\xed\xda\x56\xcd\xac\x99\xbb\xd6\xea\xb8\xed\x7a\x5e\x7a\x3f\x04\x05\xb5\x40\x71\xdb\xa9\xe4\x6b\x6d\x0a\x71\x9a\x17\x85\x50\xa7\x82\x51\x75\xde\x40\xc2\x59\x49\x93\xb2\xea\x76\xab\x14\xcf\xa8\x50\xc7\xf4\xef\x81\x67\x84\xf0\x4a\xa8\x63\x94\x42\x73\x0e\x3b\x6f\xb3\x5a\x1e\xd0\x62\x76\x8a\x7d\x99\x80\x56\x0c\xe2\x42\x41\x6d\x87\x99\x3d\x43\xed\x67\x75\xba\x96\xb0\x68\x27\xaa\x23\x2d\x9b\xfb\x47\xc4\xdc\x45\xb4\x4d\x95\x65\xfd\xa3\xb2\x96\x8e\x85\x52\x76\x8a\xc0\x2b\x27\x4e\xa5\x1e\x34\x12\x04\xa9\x71\x00\xd4\x28\xc3\xaa\x34\x30\x27\x42\x74\x8c\x02\x56\x2e\xc3\xea\x52\xa0\xf4\x4f\x94\x94\x1c\xd0\x19\xe0\x30\xf2\x48\xc7\x34\x6a\x96\x91\xff\xd7\x0c\xdd\x6a\x94\x62\xd5\x48\xfa\x55\xf1\x76\xfb\xe5\x3b\xf2\x55\x76\xb2\xb2\x72\xd8\xed\x5c\x55\x5e\xdf\xef\x91\xbb\xa5\xb1\x99\x34\x40\x8d\x3b\x55\x0f\x1f\xaf\x91\xb7\xd0\xcf\x15\x4b\x08\x73\x41\xca\xaf\x1b\x1f\x91\x63\x37\x11\x81\x7c\x82\x13\xf6\x89\xf8\xd7\x88\xca\xb0\x7f\x7f\xd4\x33\x1e\x2f\xb2\x0f\x47\x5c\x58\xff\xa3\xd1\xaa\x9b\x47\x7e\xde\xa8\xcc\x8e\xf3\xdb\xce\x42\xbe\x99\x2c\xeb\xb3\xbe\x77\x11\xc9\x3f\xff\xe6\x71\xc9\x3d\xaa\x1b\x89\x5e\xdc\x48\xaa\x1c\x56\x5c\x59\xf6\x7d\xa9\x09\x5c\xe5\xe1\xcd\x34\xdf\xc7\x16\x23\xb7\x0a\xbd\x9c\xc7\x7f\x05\x00\x00\xff\xff\x43\x02\xb8\xe2\x1a\x10\x00\x00")

func dataCloud_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataCloud_configYml,
		"data/cloud_config.yml",
	)
}

func dataCloud_configYml() (*asset, error) {
	bytes, err := dataCloud_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cloud_config.yml", size: 4122, mode: os.FileMode(436), modTime: time.Unix(1452301626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cloud_config.yml": dataCloud_configYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cloud_config.yml": &bintree{dataCloud_configYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

