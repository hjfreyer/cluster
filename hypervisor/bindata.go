// Code generated by go-bindata.
// sources:
// data/cloud_config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCloud_configYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x5b\x6f\xdb\x38\x13\x7d\xcf\xaf\x10\xf2\x3d\xf4\xa1\xa0\x75\xb1\x63\x49\x06\x0c\x7c\x76\xee\xcd\xd5\x71\x6a\xc7\xde\x5d\x14\x14\x49\x5b\x8c\x28\xc9\x26\x29\xc5\x0a\xf6\xc7\x2f\xa5\xb8\xbe\x45\x4a\x93\x2e\xba\x75\x10\x40\xa2\x66\x86\x73\xce\x1c\xce\xf0\x7f\x88\xc5\x09\x06\x28\x8e\x26\x74\xba\xb7\x27\x84\xff\x0d\x26\xd2\x8f\x39\x7d\x26\xf8\x5b\x40\x32\xd1\xda\xd3\x34\xa0\xed\xab\x2f\x80\x0b\xa8\x75\xd4\xaf\x5b\xbf\x7e\x86\x87\x66\x86\xac\xe3\xfc\xf5\xa8\xd3\xeb\x74\xf3\xe5\x4e\xef\x10\x3e\x58\x8f\xc7\x68\x68\x0f\xf8\xe0\xa1\x77\xd9\x19\x06\x7e\xf2\x10\x19\xbd\x83\xc6\xa2\x71\x34\xec\x87\xb7\xe7\x23\x7c\xcf\x4f\x27\xe9\xf1\xf4\x39\x25\x5f\x8f\x3c\xe9\x4c\x28\x8f\x04\x6c\x42\x37\x0a\x86\xe2\x6e\x3e\xf1\x6f\x2e\x23\x74\x97\xe9\xbc\xa1\xdf\xfa\x83\x06\xb5\x8d\xe3\x70\xfe\x78\x76\xe2\x4e\xed\x93\xe0\xf4\xda\xbe\xb2\x61\xf3\x62\x74\xc9\x9a\x66\x6c\xa1\xb9\xe0\x3d\x67\x34\xee\x38\x46\xdf\x99\xf0\x2f\xd7\xa3\xe9\xa1\x7e\xe3\x66\xa7\xe9\xf8\x3e\xf0\x1e\xef\x0f\xbe\x5c\xe0\x93\xf3\xeb\x91\x73\x3e\x9e\x39\xfd\x51\x77\xda\xc7\x97\x7a\xea\x2d\xee\x16\xe9\xcd\x3c\xb0\x3a\xb7\xdd\xeb\x49\x96\x3c\x31\x5f\xf8\xc7\x75\x73\x34\x0f\xe0\x41\xe3\xb3\xd7\x3b\x83\x96\xc1\xbe\x0e\xdd\x6e\x6f\x36\xcc\xae\x9a\xd8\xed\xfa\x52\x1f\x65\xa2\x9e\x0d\xe6\xa6\x73\x91\xf9\xcf\x83\xcb\x64\x78\x74\xf3\xc0\x50\x67\x12\xcf\xc7\x5d\x76\x7a\x60\x1f\xd9\xcf\xe7\x47\x63\x83\x59\x75\x63\xf0\x78\xb7\xc0\x5f\x7a\x77\x41\x5a\x37\x6f\xb0\x63\x7e\xc6\xf3\xf1\xc0\xb1\xeb\xe8\x34\x4c\x2f\xa7\xc7\x27\x67\xac\x9e\x9a\x8f\xa7\xd3\xc3\xa1\x37\x40\x0b\xe3\x6e\xdc\x1c\x8c\xe7\xe9\xbc\x7b\x62\x12\xf6\xf9\x1a\xe2\xc6\x99\xef\xd1\xab\x00\xba\x81\xa5\xcf\xa7\xfd\x81\xe6\x3f\x4e\x38\xc9\x08\xff\x3f\xf2\x13\x8e\xfc\xfd\xbd\x3d\x14\x73\x12\x17\xb5\x49\x22\x2a\x8b\x87\xbc\x4c\x11\x0c\x49\x4b\xc3\x50\xc2\x5a\x18\x27\x91\x2c\x96\x35\x0d\xc5\x61\x08\x23\xdc\xd2\x84\x84\x7c\xbd\x18\x49\x12\xc9\x96\xf6\xf7\x72\x41\xd3\xfe\xb8\xca\x9d\xfe\x5a\xbd\x0f\x7d\x28\xdb\x3a\x26\xa9\x8e\xa9\x08\x74\x2f\x03\x49\x42\xb1\xee\x20\xcf\x76\xb1\xed\x02\x1b\x3a\x16\x68\x58\xcd\x3a\x70\x9d\x89\x07\x4c\xd7\xc2\xcd\xba\x69\x36\x4d\x07\x6e\xc4\x20\x9c\xa8\x20\x2a\x27\x7d\xb5\x78\x9f\xcd\x48\x9b\x2c\x64\x63\x2b\xef\x30\x92\xc0\x63\x31\x0a\x90\x0f\x69\xf4\x2b\x11\xb8\x86\x65\x63\xdc\xf0\x00\x24\x8e\x09\x1a\x75\xc3\x01\x6e\xbd\x01\x41\xbd\x69\x9b\xd8\xb1\x9a\xa6\x0b\xbd\x5d\x04\x2a\x3b\x7d\x9d\xdd\x7b\xb0\xcc\x08\x17\x71\x04\xd9\xaf\x44\x42\x1c\x62\x98\x75\xcf\x05\x18\x11\x85\xc4\x82\x0e\x70\x4c\x07\x01\x07\x37\x1b\x06\x69\xda\x9e\x85\xcc\x32\x24\xdf\x73\x2b\xc3\xb1\x05\x24\x48\x3c\xc2\x88\xac\x09\xc2\x53\x8a\xc8\x5b\x28\x48\x04\x3d\xa6\x5c\x24\x4f\xc8\x1b\xc0\xbe\x2a\xc5\xae\x71\x1d\x11\x81\x38\x9d\x49\x1a\x47\xed\x0b\xb5\x17\x8f\x88\x24\x42\xbb\x78\xd9\x76\x6d\x16\xa3\x24\x54\x91\x60\x61\xe8\x4b\x39\x13\x2d\x5d\x9f\x52\xe9\x27\x5e\x4d\x65\xa3\x07\x2b\xdf\x8d\xc7\xbd\xf5\xae\xfd\x97\xfc\xd7\x1b\x1f\x2f\x08\xea\xe7\xd9\xdf\xe6\x9c\x24\x82\xeb\x9e\x2a\x6b\x18\x60\xca\x35\x30\xd3\x74\x22\xd1\x66\x50\x05\x97\x4e\x88\x90\xe2\x75\x80\xb5\xf7\x92\x2c\xed\xcf\x95\x91\x22\x12\xc0\x19\x05\x39\x7d\x8a\xf2\x22\x73\x95\xb8\x69\xd9\x35\x43\xfd\x99\x2d\xc7\x70\x8c\x5d\x7b\xc6\xe2\x27\x30\xe3\x34\xa5\x8c\x4c\x09\x6e\xe7\x84\xee\xd8\xbc\x74\xec\x76\x65\x96\x3b\xe6\x69\xdb\x5a\xbd\xdf\x91\xa2\x68\xed\x38\x02\x13\x48\x59\xc2\xc9\xee\xa7\x3e\x41\xed\x83\x0d\xee\xce\x23\xb5\xcc\xd8\x86\x18\xa1\x2a\x2b\xee\x66\xed\x30\x61\x92\x82\x44\xa1\xab\x29\xc7\xa9\x2a\xd8\x13\xa7\x92\x7c\x9b\xa8\xcc\x97\xa3\x63\x06\xa5\xdf\xd2\x3e\x55\x66\xba\xb1\x58\xcb\x60\xc8\x3e\xed\x95\x0a\x47\x91\x38\x50\x04\xaa\xea\xb7\xb4\xf4\xbb\xa4\x03\x9a\x6b\xf0\x36\xc6\xcb\xf7\x90\x48\x98\x77\x9a\xd6\x2a\xd3\xb5\x88\x73\xca\x24\x8f\x19\x23\x7c\xf9\x55\xcc\x08\x5a\x5b\xfa\xb1\x90\xd7\x44\x3e\xc5\x3c\xd8\x92\xb0\xa6\xa5\x31\x53\xda\x13\xad\x4d\x46\x97\x81\xf7\x15\x2a\xb0\x06\xb0\xbf\x61\xf2\x12\xf1\x36\x47\xbf\xb5\xaa\x2d\x19\xd9\xdf\x61\x64\xbf\x2c\xbc\x10\x0c\x20\xc2\xe5\x07\x23\xe7\x7a\x14\x3e\xe4\x44\x47\xb0\xf0\xa7\x13\x8a\x60\xd5\x26\x29\xe4\x80\x27\xd1\x4f\xe3\x50\xfe\xba\xf2\xff\x11\x16\x05\x17\x83\xbc\x3a\xea\x84\x7d\x7c\x03\x46\xbd\x9c\x30\x5c\x1a\x5a\xe1\xfd\x30\x41\xa5\x81\xd4\x2e\xcd\xc6\xc7\x42\xed\xb8\xe4\x2a\x53\xf3\x41\x49\xb5\x4a\x2f\x78\x3b\x3e\x0d\xe1\x34\xff\xe2\xd5\xa6\x88\xd7\x68\xac\x68\x54\x70\x73\xbb\x96\x55\x33\x6b\xe6\xb6\xb5\x3a\x64\x62\x37\x13\x75\x3d\x03\x05\xb1\x40\x31\xdb\xae\x64\x6b\x65\x0a\x71\x9a\x4b\x42\xa8\x23\xc1\xa8\x3a\x64\x20\xe1\xac\xa4\x33\x59\x75\xdb\x2d\xf5\x67\x54\xa8\xb3\xf9\xef\x9c\x67\x84\xf0\x4a\x57\xc7\x28\x75\xcd\x29\x6c\xbf\x46\xf5\x72\x3c\x8b\x71\x59\x42\x4d\x31\x7b\x8b\xfa\x69\x5b\xcc\xec\x18\x6a\x3f\x52\xe9\xaa\x82\x45\x2f\x51\xdd\xe8\xa5\xa3\xbf\xa7\x96\xdb\x1e\x2d\xb3\x66\xd5\x8c\x77\x56\xb5\x74\x14\x94\x92\x53\xe4\x5d\x39\x65\x2a\xcb\x41\x23\x41\x90\x1a\x01\x40\x8d\x2f\xac\x94\x81\x39\x11\xa2\x6d\x14\x6e\xe5\x55\x58\x5e\x04\x54\xf9\x13\x55\x49\x0e\xe8\x0c\x70\x18\x4d\x49\xdb\x34\x6a\x96\x91\xff\xd7\x0c\xdd\x6a\x94\xfa\xaa\x31\xf4\xb3\xb5\xdb\x6e\x96\x6f\x54\xaf\xb2\x8d\x95\xa9\x61\xbb\x6d\x55\x45\x7d\xbb\x41\x6e\x2b\x63\x3d\x65\x80\x1a\x71\x4a\x0e\xef\x97\xc8\x6b\xd7\x0f\x69\x25\x84\x79\x3d\xca\x6f\x18\xef\xa9\xc6\x36\x0e\x81\x7c\x82\x13\xf6\x81\xf4\x57\x1e\xbf\x31\xeb\x19\x8f\x17\xd9\xbb\x33\x2e\xac\xff\xd3\x6c\xd5\xa5\x23\x3f\x6e\x54\x66\x87\xf9\x05\x67\x21\x5f\x4d\x95\xd5\x51\xdf\xb9\x84\xe4\xbf\xdf\x79\x5a\xf2\x88\xea\x36\xa2\x17\xb7\x91\xaa\x80\x15\xd7\x95\xdd\x58\x6a\xfa\x56\x45\x78\x35\xc9\x77\x7d\x8b\x71\x5b\xe5\xbd\x9c\xc5\xff\x04\x00\x00\xff\xff\x85\x6e\x58\xdb\xd6\x10\x00\x00")

func dataCloud_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataCloud_configYml,
		"data/cloud_config.yml",
	)
}

func dataCloud_configYml() (*asset, error) {
	bytes, err := dataCloud_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cloud_config.yml", size: 4310, mode: os.FileMode(420), modTime: time.Unix(1453159766, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cloud_config.yml": dataCloud_configYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cloud_config.yml": &bintree{dataCloud_configYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

