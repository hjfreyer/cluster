// Code generated by go-bindata.
// sources:
// data/cloud_config.yml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataCloud_configYml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x6d\x6f\xe2\xba\x12\xfe\xde\x5f\x11\xf5\x7e\xd8\x0f\x2b\x93\x17\x28\x09\x48\x48\x17\xfa\xbe\x7d\xa5\x74\xa1\x70\xef\xd1\xca\xb1\x4d\xe2\xc6\x49\xc0\x76\x52\x52\x9d\x1f\x7f\x9c\x80\x80\x50\xd2\x6d\xf7\x68\xcf\xa1\xaa\x94\x38\xf3\x8c\x67\x9e\x67\x3c\xe3\xff\x20\x16\x27\x18\xa0\x38\x9a\x52\xef\xe0\x40\x08\xff\x07\x4c\xa4\x1f\x73\xfa\x4a\xf0\x8f\x80\x64\xa2\x7d\xa0\x69\x40\x3b\x54\x5f\x00\x17\x50\xeb\xaa\x5f\xaf\x7e\xfb\x0a\x8f\xcd\x0c\x59\xa7\xf9\xeb\x49\xb7\xdf\xed\xe5\xcb\xdd\xfe\x31\x7c\xb2\x9e\x4f\xd1\xc8\x1e\xf2\xe1\x53\xff\xba\x3b\x0a\xfc\xe4\x29\x32\xfa\x47\x8d\x45\xe3\x64\x34\x08\xef\x2f\xc7\xf8\x91\x9f\x4f\xd3\x53\xef\x35\x25\xdf\x4f\x5c\xe9\x4c\x29\x8f\x04\x6c\xc2\x56\x14\x8c\xc4\xc3\x7c\xea\xdf\x5d\x47\xe8\x21\xd3\x79\x43\xbf\xf7\x87\x0d\x6a\x1b\xa7\xe1\xfc\xf9\xe2\xac\xe5\xd9\x67\xc1\xf9\xad\x7d\x63\xc3\xe6\xd5\xf8\x9a\x35\xcd\xd8\x42\x73\xc1\xfb\xce\x78\xd2\x75\x8c\x81\x33\xe5\xdf\x6e\xc7\xde\xb1\x7e\xd7\xca\xce\xd3\xc9\x63\xe0\x3e\x3f\x1e\x7d\xbb\xc2\x67\x97\xb7\x63\xe7\x72\x32\x73\x06\xe3\x9e\x37\xc0\xd7\x7a\xea\x2e\x1e\x16\xe9\xdd\x3c\xb0\xba\xf7\xbd\xdb\x69\x96\xbc\x30\x5f\xf8\xa7\x75\x73\x3c\x0f\xe0\x51\xe3\xab\xdb\xbf\x80\x96\xc1\xbe\x8f\x5a\xbd\xfe\x6c\x94\xdd\x34\x71\xab\xe7\x4b\x7d\x9c\x89\x7a\x36\x9c\x9b\xce\x55\xe6\xbf\x0e\xaf\x93\xd1\xc9\xdd\x13\x43\xdd\x69\x3c\x9f\xf4\xd8\xf9\x91\x7d\x62\xbf\x5e\x9e\x4c\x0c\x66\xd5\x8d\xe1\xf3\xc3\x02\x7f\xeb\x3f\x04\x69\xdd\xbc\xc3\x8e\xf9\x15\xcf\x27\x43\xc7\xae\xa3\xf3\x30\xbd\xf6\x4e\xcf\x2e\x58\x3d\x35\x9f\xcf\xbd\xe3\x91\x3b\x44\x0b\xe3\x61\xd2\x1c\x4e\xe6\xe9\xbc\x77\x66\x12\xf6\xf5\x16\xe2\xc6\x85\xef\xd2\x9b\x00\xb6\x02\x4b\x9f\x7b\x83\xa1\xe6\x3f\x4f\x39\xc9\x08\xff\x2f\xf2\x13\x8e\xfc\xc3\x83\x03\x14\x73\x12\x17\xda\x24\x11\x95\xc5\x43\x2e\x53\x04\x43\xd2\xd6\x30\x94\xb0\x16\xc6\x49\x24\x8b\x65\x4d\x43\x71\x18\xc2\x08\xb7\x35\x21\x21\xdf\x2c\x46\x92\x44\xb2\xad\xfd\xb9\x5a\xd0\xb4\xff\xdd\xe4\xa0\x3f\xd6\xef\x23\x1f\xca\x8e\x8e\x49\xaa\x63\x2a\x02\xdd\xcd\x40\x92\x50\xac\x3b\xc8\xb5\x5b\xd8\x6e\x01\x1b\x3a\x16\x68\x58\xcd\x3a\x68\x39\x53\x17\x98\x2d\x0b\x37\xeb\xa6\xd9\x34\x1d\xb8\xe5\x83\x70\xa2\x9c\xa8\x98\xf4\xf5\xe2\x63\x36\x23\x1d\xb2\x90\x8d\x52\xdc\x61\x24\x81\xcb\x62\x14\x20\x1f\xd2\xe8\x77\x66\xd0\x32\x2c\x1b\xe3\x86\x0b\x20\x71\x4c\xd0\xa8\x1b\x0e\x68\xd5\x1b\x10\xd4\x9b\xb6\x89\x1d\xab\x69\xb6\xa0\xbb\x9b\x81\x8a\x4e\xdf\x44\xb7\x2f\x97\x52\x32\x41\xe2\x12\x46\x64\x4d\x10\x9e\x52\x44\xde\xcb\x83\x44\xd0\x65\x0a\x22\x79\x42\xde\x49\xed\xbb\x52\x7a\x93\xd9\x09\x11\x88\xd3\x99\xa4\x71\xd4\xb9\x52\x7b\xf1\x88\x48\x22\xb4\xab\xe5\xb6\x1b\xb3\x18\x25\xa1\xf2\x04\x0b\x43\x5f\xca\x99\x68\xeb\xba\x47\xa5\x9f\xb8\x35\x15\x8d\x1e\xac\xb1\x5b\x8f\x07\x9b\x5d\x07\xcb\xf8\x37\x1b\x9f\x2e\x08\x1a\xe4\xd1\xdf\xe7\xac\x24\x82\xeb\xae\xa2\x23\x0c\x30\xe5\x1a\x98\x69\x3a\x91\x68\xdb\xa9\x4a\x97\x4e\x89\x90\xe2\xad\x83\x0d\x7a\x45\x96\xf6\xff\xb5\x91\x22\x12\xc0\x19\x05\x39\x7d\x84\x8b\x22\x72\x15\xb8\x69\xd9\x35\x43\xfd\x99\x6d\xc7\x70\x8c\x5d\x7b\xc6\xe2\x17\x30\xe3\x34\xa5\x8c\x78\x04\x77\x72\x42\x77\x6c\x96\x9d\xae\x53\x19\xe5\x8e\x79\xda\xb1\xd6\xef\x0f\xa4\x10\xad\x13\x47\x60\x0a\x29\x4b\x38\xd9\xfd\x34\x20\xa8\x73\xb4\xc5\xdd\x65\xa4\x96\x19\xdb\x2a\x47\xa8\x64\xc5\xbd\xac\x13\x26\x4c\x52\x90\xa8\xec\x6a\x0a\xe8\x29\xc1\x5e\x38\x95\xe4\xc7\x54\x45\xbe\x6a\xb9\x33\x28\xfd\xb6\xf6\xa5\x32\xd2\xad\xc5\x5a\x06\x43\xf6\xe5\xa0\x5c\x38\xcb\x1d\x57\x5b\x2b\x2a\x87\x8a\x46\x55\x03\x6d\x2d\x35\x57\x8b\x01\xcd\x2b\xf1\x3e\xc6\xab\xf7\x90\x48\x98\x9f\xd3\xb6\xb6\x0e\x78\x53\xcb\x39\x73\x92\xc7\x8c\x11\xbe\xfa\x2a\x66\x04\x6d\x99\xfa\xb1\x90\xb7\x44\xbe\xc4\x3c\x28\x95\xb2\xa6\xa5\x31\x53\x35\xb8\x6a\x52\x2b\x66\x57\x9e\x0f\x55\x76\x60\x93\xc8\xe1\x96\xc9\xd2\xe3\x7d\xce\x42\x69\x55\x5b\x31\x73\xb8\xc3\xcc\xe1\x3e\xf7\x42\x30\x80\x08\x97\x9f\xf4\x9c\xd7\xa5\xf0\x21\x27\x3a\x82\x05\x9e\x4e\x29\x82\x55\x9b\xa4\x90\x03\x9e\x44\xbf\x9c\x87\xc2\xeb\x0a\xff\xb3\x5c\x54\xba\x18\xe4\xfa\xa8\x93\xf6\xf9\x0d\x18\x75\x73\xc2\xf0\x5e\xd7\x2a\xdf\x4f\x13\xb4\xd7\x91\xda\xa5\xd9\xf8\x9c\xab\x1d\x48\x5e\x66\xaa\xbf\xaa\x62\xdd\xaa\xad\x1d\x16\xca\x1b\xd0\x10\x7a\xf9\x17\xb7\xe6\x21\x5e\xa3\xb1\xe2\x51\xe5\x9b\xdb\xb5\xad\x9a\x59\x33\xcb\xd6\xea\xb4\x95\x3d\x2f\xbd\x1f\x82\x82\x5a\xa0\xb8\xed\x54\xf2\xb5\x36\x85\x38\xcd\x8b\x42\xa8\x53\xc1\xa8\x3a\x6e\x20\xe1\x6c\x4f\x8f\xb2\xea\x76\x6b\x2f\x9e\x51\xa1\x4e\xe9\xdf\x03\xcf\x08\xe1\x95\x50\xc7\xd8\x0b\xcd\x39\xec\xbc\xcd\x6a\x79\x40\x8b\xd1\x29\x76\x65\x02\x5a\x31\x87\x0b\x05\xb5\x12\x33\x3b\x86\xda\xcf\xea\x74\x2d\x61\xd1\x4e\x54\x47\x5a\xf6\xf6\x8f\x88\x59\x46\xb4\xcd\x9a\x55\x33\x3e\x2a\xeb\xde\xa9\xb0\x97\x9d\x22\xf0\xca\x81\x53\xa9\x07\x8d\x04\x41\x6a\x1a\x00\x35\xc9\xb0\x2a\x0d\xcc\x89\x10\x1d\xa3\x80\xed\x97\x61\x75\x27\x50\xfa\x27\x4a\x4a\x0e\xe8\x0c\x70\x18\x79\xa4\x63\x1a\x35\xcb\xc8\xff\x6b\x86\x6e\x35\xf6\x62\xd5\x44\xfa\x55\xf1\xca\xfd\xf2\x1d\xf9\x2a\x3b\xd9\xbe\x72\x28\x77\xae\x2a\xaf\xef\xf7\xc8\x72\x69\x6c\x26\x0d\x50\xd3\x4e\xd5\xc3\xc7\x6b\xe4\x2d\xf4\x73\xc5\x12\xc2\x5c\x90\xfd\xb7\x8d\x8f\xc8\x51\x4e\x44\x20\x9f\xe0\x84\x7d\x22\xfe\x35\xa2\x32\xec\xdf\x1f\xf5\x8c\xc7\x8b\xec\xc3\x11\x17\xd6\xff\x68\xb4\xea\xe6\x91\x9f\x37\x2a\xb3\xe3\xfc\xb2\xb3\x90\x6f\x26\xcb\xfa\xac\xef\x5c\x44\xf2\xdf\xbf\x79\x5c\x72\x8f\xea\x46\xa2\x17\x37\x92\x2a\x87\x15\x57\x96\x5d\x5f\x6a\x02\x57\x79\x78\x33\xcd\x77\xb1\xc5\xc8\xad\x42\x2f\xe7\xf1\x5f\x01\x00\x00\xff\xff\xe3\x6c\x92\x39\x19\x10\x00\x00")

func dataCloud_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_dataCloud_configYml,
		"data/cloud_config.yml",
	)
}

func dataCloud_configYml() (*asset, error) {
	bytes, err := dataCloud_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/cloud_config.yml", size: 4121, mode: os.FileMode(436), modTime: time.Unix(1452912690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/cloud_config.yml": dataCloud_configYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"cloud_config.yml": &bintree{dataCloud_configYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

